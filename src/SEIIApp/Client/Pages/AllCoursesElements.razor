@page "/getallchapters"
@layout MainLayout;
@inject Services.ChapterElementDefinitionBackendAccessService ChapterElementBackendService
@inject Services.CourseDefinitionBackendAccessService CourseDefinitionService
@inject Services.ChapterElementDefinitionBackendAccessService ChapterElementDefinitionService
@inject Services.TextElementDefinitionBackendAccessService TextElementBackendService
@inject Services.PictureElementDefinitionBackendAccessService PictureElementBackendService
@inject Services.VideoElementDefinitionBackendAccessService VideoElementBackendService
@inject Services.QuizElementDefinitionBackendAccessService QuizElementBackendService
@inject Services.ChapterDefinitionBackendAccessService ChapterDefinitionService

@using System.Collections
@using System.Threading.Tasks;

@code {

    public CourseDefinitionBaseDto[] Courses { get; set; }
    public ChapterDefinitionDto Chapter { get; set; }

    private Dictionary<int, ChapterDefinitionDto[]> ChapterForCourses { get; set; } = new Dictionary<int, ChapterDefinitionDto[]>();
    List<ChapterElementDefinitionDto> chapterElemente = new List<ChapterElementDefinitionDto>();

    int courseId = 1;
    int chapterId = 1;

    int aktuellesChapterElementIndex = 0;
    int letztesChapterElementIndex = 0;
    bool isLoading = true;


    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        Courses = await CourseDefinitionService.GetCourseOverview();

        Chapter = await ChapterElementDefinitionService.GetChapterElementOverview(courseId, chapterId);

        //fill ChapterForCourses dictionairy
        foreach (var c in Courses)
        {
            ChapterForCourses.Add(c.CourseId, await ChapterDefinitionService.GetChapterOverview(c.CourseId));
        }

        //fill local arrays for view || start view logic
        if (Courses?.Length > 0)
        {
            @foreach (var course in Courses)
            {
                @foreach (var chapter in ChapterForCourses[course.CourseId])
                {
                    foreach (var element in chapter.ChapterElements)
                    {
                        if (element.ChapterElementType.Equals(ChapterElementType.Text))
                        {
                            await GetTextElement(course, Chapter, element);
                        }
                        else if (element.ChapterElementType.Equals(ChapterElementType.Video))
                        {
                            await getVideoElement(course, Chapter, element);
                        }
                        else if (element.ChapterElementType.Equals(ChapterElementType.Picture))
                        {
                            await getPictureElement(course, Chapter, element);
                        }
                        else if (element.ChapterElementType.Equals(ChapterElementType.Quiz))
                        {
                            await getQuizElement(course, Chapter, element);
                        }
                    }
                }
            }
            isLoading = false;
        }
    }

    protected async Task GetTextElement(CourseDefinitionBaseDto course, ChapterDefinitionDto Chapter, ChapterElementDefinitionDto element)
    {
        Task<ExplanatoryTextDefinitionDto> TaskText = TextElementBackendService.GetTextElementById(course.CourseId, Chapter.ChapterId, element.Id);
        ExplanatoryTextDefinitionDto Text = await TaskText;

        chapterElemente.Add(Text);
        base.StateHasChanged();
    }

    protected async Task getPictureElement(CourseDefinitionBaseDto course, ChapterDefinitionDto Chapter, ChapterElementDefinitionDto element)
    {
        Task<PictureDefinitionDto> pictureTask = PictureElementBackendService.GetPictureElementById(course.CourseId, Chapter.ChapterId, element.Id);
        PictureDefinitionDto picture = await pictureTask;

        chapterElemente.Add(picture);
        base.StateHasChanged();
    }

    protected async Task getVideoElement(CourseDefinitionBaseDto course, ChapterDefinitionDto Chapter, ChapterElementDefinitionDto element)
    {
        Task<VideoDefinitionDto> videoTask = VideoElementBackendService.GetVideoElementById(course.CourseId, Chapter.ChapterId, element.Id);
        VideoDefinitionDto video = await videoTask;

        chapterElemente.Add(video);
        base.StateHasChanged();
    }

    protected async Task getQuizElement(CourseDefinitionBaseDto course, ChapterDefinitionDto Chapter, ChapterElementDefinitionDto element)
    {
        Task<QuizDefinitionDto> quizTask = QuizElementBackendService.GetQuizElementById(course.CourseId, Chapter.ChapterId, element.Id);
        QuizDefinitionDto quiz = await quizTask;

        chapterElemente.Add(quiz);
        base.StateHasChanged();
    }
}

<!-- start of view when local data was extracted-->
@if (!isLoading && Courses?.Length > 0)
{
    @foreach (var course in Courses)
    {
        <h1>@(course.CourseName)</h1>

        @foreach (var chapter in ChapterForCourses[course.CourseId])
        {
            <h2>@(chapter.ChapterName) </h2>
                <ol>
                <li>
                    <ul>
                        @{
                            if (chapter != null)
                            {
                                if (chapterElemente.Count > 0)
                                {
                                    for (letztesChapterElementIndex = aktuellesChapterElementIndex + chapter.ChapterElements.Length - 1; aktuellesChapterElementIndex <= letztesChapterElementIndex; aktuellesChapterElementIndex++)
                                    {
                                        ChapterElementDefinitionDto chapterElement = chapterElemente[aktuellesChapterElementIndex];

                                        if (chapterElement.ChapterElementType.Equals(ChapterElementType.Text))
                                        {
                                            ExplanatoryTextDefinitionDto textElement = (ExplanatoryTextDefinitionDto)chapterElement;
                                            <p>(@textElement.Title) </p>
                                            <p>(@textElement.ContentText) </p>
                                            <hr style="border: 0; height: 5px; background-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.75), rgba(0, 0, 0, 0));" />
                                        }
                                        else if (chapterElement.ChapterElementType.Equals(ChapterElementType.Video))
                                        {
                                            VideoDefinitionDto videoElement = (VideoDefinitionDto)chapterElement;
                                            <iframe width="420" height="315" src="@videoElement.VideoUri.DnsSafeHost">
                                            </iframe>
                                            <hr style="border: 0; height: 5px; background-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.75), rgba(0, 0, 0, 0));" />
                                        }
                                        else if (chapterElement.ChapterElementType.Equals(ChapterElementType.Picture))
                                        {
                                            PictureDefinitionDto pictureElement = (PictureDefinitionDto)chapterElement; //TODO Link PictureDefinitionDto hinzufuegen + bei src einfuegen
                                            <figure>
                                                <img src="" alt="@pictureElement.Description" width="500" height="700" />
                                                <!-- <figcaption>ATE pictureElement.Description</figcaption> TODO hinzufuegen?-->
                                            </figure>
                                            <hr style="border: 0; height: 5px; background-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.75), rgba(0, 0, 0, 0));" />
                                        }
                                        else if (chapterElement.ChapterElementType.Equals(ChapterElementType.Quiz))
                                        {
                                            <p> Quiz Darstellung in progress </p>
                                            <hr style="border: 0; height: 5px; background-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.75), rgba(0, 0, 0, 0));" />
                                        }
                                    }
                                }
                            }
                        }
                    </ul>
                </li>
            </ol>
        }
    }
}
