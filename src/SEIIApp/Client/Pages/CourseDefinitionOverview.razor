@page "/coursedef"
@inject Services.CourseDefinitionBackendAccessService CourseDefinitionService
@inject NavigationManager NavigationManager

<h3>Course Definitions Overview</h3>

@{ if (Courses?.Length > 0) {
    <ol>
        @foreach (var course in Courses)
        {
            <li>@(course.CourseName) <button class="btn btn-primary" @onclick="() => EditCourse(course)">Edit</button><button class="btn btn-primary" @onclick="() => DeleteCourse(course)">Delete</button></li>
        }
    </ol>

        <button @onclick="AddCourse">Add Course</button>
    }
    else {
        <h5>Loading ...  or no courses found.</h5>
    }
}


@code {

    public CourseDefinitionBaseDto[] Courses { get; set; }

    protected override async Task OnParametersSetAsync() {
        await base.OnParametersSetAsync();
        Courses = await CourseDefinitionService.GetCourseOverview();
    }

    private void EditCourse(CourseDefinitionBaseDto course) {
        NavigationManager.NavigateTo("/coursedefedit/" + course.CourseId);
    }

    private void AddCourse() {
        NavigationManager.NavigateTo("/coursedefedit/0");
    }

    private async Task DeleteCourse(CourseDefinitionBaseDto course)
    {
       await CourseDefinitionService.DeleteCourse(course.CourseId);
    }

}

