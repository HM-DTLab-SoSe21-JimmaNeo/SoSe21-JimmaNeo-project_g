@page "/useredit/{id:int}"

@inject Services.UserDefinitionBackendService UserService
@inject Services.CourseDefinitionBackendAccessService CourseDefinitionService
@inject NavigationManager NavigationManager
@inject Services.BiscuitService BiscuitService

<h3 style="margin-bottom: 1em">User Information</h3>

@if (UserDefinitionDto != null)
{
    <h4 style="margin-bottom: 1em">User Type: @UserDefinitionDto.AuthDefinitions[0].Role.ToString()</h4>
    <h4 style="margin-bottom: 1em">UserId: @UserDefinitionDto.UserId</h4>


    <EditForm EditContext="@context" OnSubmit="OnSubmit">


        <div class="col-md-12">
            <form>
                <div class="form-group row">
                    <label for="username" class="col-1 col-form-label" style="margin-right: 0.25em;">Username</label>
                    <div class="col-4">
                        <InputText id="username" name="username" class="form-control here" required="required" type="text" @bind-Value="UserDefinitionDto.AuthDefinitions[0].UserName" />
                    </div>
                </div>


                <div class="form-group row">
                    <label for="email" class="col-1 col-form-label" style="margin-right: 0.25em;">Mail</label>
                    <div class="col-4">
                        <InputText id="email" name="email" class="form-control here" required="required" type="text" @bind-Value="UserDefinitionDto.Email" />
                    </div>
                </div>


                <div class="form-group row">
                    <label for="publicinfo" class="col-1 col-form-label" style="margin-right: 0.25em;">Info</label>
                    <div class="col-4">
                        <InputTextArea id="publicinfo" name="publicinfo" cols="40" rows="4" class="form-control" @bind-Value="UserDefinitionDto.Description" />
                    </div>
                </div>
            </form>
        </div>


        <br />


        <button name="submit" type="submit" class="btn btn-primary" style="margin-right: 0.25em;" @onclick="SaveUserToBackend">Update Profile</button>

        @if (UserDefinitionDto.UserId == BiscuitService.User.UserId)
        {
            <button name="changePassword" type="submit" class="btn btn-primary" @onclick="ChangePassword">Change Password</button>

        }



        <br />
        <br />



        <h4 style="margin-bottom: 0.8em">Asigned Courses</h4>

        @if (UserDefinitionDto.AsignedCourses?.Length > 0)
        {

            @foreach (var course in UserDefinitionDto.AsignedCourses)
            {

                <div class="form-group row" style="margin-bottom: 0.5em">


                    <div class="col-2">
                        <input id="coursename" name="coursename" placeholder="@(course.CourseName)" class="form-control here" required="required" type="text" disabled>
                    </div>

                    @if (BiscuitService.User.AuthDefinitions[0].Role == RoleType.Admin || BiscuitService.User.AuthDefinitions[0].Role == RoleType.Teacher)
                    {
                        <button type="button" class="btn btn-success btn-add" @onclick="() => EditCourse(course)" style="margin-right: 0.25em;">

                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-fill" viewBox="0 0 16 16">
                                <path d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708l-3-3zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207l6.5-6.5zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.499.499 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11l.178-.178z" />
                            </svg>


                        </button>

                        <button type="button" class="btn btn-danger btn-add" @onclick="() => DeleteCourse(course)" style="margin-right: 0.5em;">

                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">
                                <path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z" />
                            </svg>

                        </button>
                    }

                    <label> Leave course:  </label>
                    <button type="button" class="bi bi-x-circle-fill" @onclick="() => LeaveCourse(course)" style="margin-left: 0.25em;">

                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-circle-fill" viewBox="0 0 16 16">
                            <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z" />
                        </svg>

                    </button>

                </div>

            }

            @if (BiscuitService.User.AuthDefinitions[0].Role == RoleType.Admin || BiscuitService.User.AuthDefinitions[0].Role == RoleType.Teacher)
            {

                <button type="button" class="btn btn-primary btn-add" @onclick="AddCourse" style="margin-top: 1em">Add Course</button>

                <br />
                <br />

                <div class="form-group row">
                    <label for="userid" class="col-1 col-form-label">Course</label>
                    <div class="col-4">
                        <InputText id="courseId" name="courseId" class="form-control here" required="required" type="text" @bind-Value="courseId" />
                    </div>
                </div>

                <button type="button" class="btn btn-primary btn-add" @onclick="AddUserToCourse" style="margin-top: 1em">Add Course to User</button>
            }


        }
        else
        {
            <h6>Loading ...  or no courses found.</h6>
        }

        <br />
    </EditForm>

}
else
{
    <h5>User in loading (or not found) ...</h5>
}

@code{
    [Parameter]
    public int id { get; set; }

    public string courseId { get; set; }


    public UserDefinitionDto UserDefinitionDto { get; set; }
    private EditContext context { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (id != 0)
        {
            var existingElement = await UserService.GetUserById(id);
            UserDefinitionDto existingUser = (UserDefinitionDto)existingElement;
            PrepareEditOrAddOfUser(existingUser);
        }
        else
        {
            PrepareEditOrAddOfUser(new UserDefinitionDto());
        }
        await base.OnParametersSetAsync();

        context = new EditContext(UserDefinitionDto);
    }

    private void PrepareEditOrAddOfUser(UserDefinitionDto c)
    {
        this.UserDefinitionDto = c;
    }


    private void OnSubmit(EditContext context)
    {

    }

    private async void SaveUserToBackend()
    {
        var isValid = context.Validate();
        if (isValid)
        {
            var answer = await UserService.AddOrUpdateUser(UserDefinitionDto);
            if (answer != null)
            {
                this.UserDefinitionDto.UserId = answer.UserId; //refresh id (if created)
            }
        }
        NavigationManager.NavigateTo("/useredit/" + UserDefinitionDto.UserId);
    }

    private void EditCourse(CourseDefinitionBaseDto course)
    {
        NavigationManager.NavigateTo("/coursedefedit/" + course.CourseId);
    }

    private void AddCourse()
    {
        NavigationManager.NavigateTo("/coursedefedit/0");
    }

    private async Task DeleteCourse(CourseDefinitionBaseDto course)
    {
        await CourseDefinitionService.DeleteCourse(course.CourseId);
        NavigationManager.NavigateTo("/useredit/" + UserDefinitionDto.UserId);
    }

    private async Task LeaveCourse(CourseDefinitionBaseDto course)
    {
        await CourseDefinitionService.LeaveCourse(course.CourseId, id);
        NavigationManager.NavigateTo("/useredit/" + UserDefinitionDto.UserId);
    }

    private async Task ChangePassword()
    {
        NavigationManager.NavigateTo("/passwordsetter/" + UserDefinitionDto.UserId);
    }

    private async void AddUserToCourse()
    {

        int courseIdInt;
        if (Int32.TryParse(courseId, out courseIdInt))
        {
            if (courseIdInt == null || courseIdInt == 0)
            {
                return;
            }
            await CourseDefinitionService.AddUserToCourse(courseIdInt, id);

        }
    }
}
