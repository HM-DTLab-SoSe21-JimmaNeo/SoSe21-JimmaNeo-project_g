@page "/quizedit/{ChapterId:int}/{Id:int}"
@inject NavigationManager NavigationManager
@inject Services.QuizElementDefinitionBackendAccessService QuizElementDefinitionService

<h5>Quiz Definition</h5>

@if (QuizDefinitionDto != null)
{
    <EditForm EditContext="@context" OnSubmit="OnSubmit">
        <ObjectGraphDataAnnotationsValidator />

        <label>Quiz Name</label>
        <InputText @bind-Value="QuizDefinitionDto.QuizName" />

        @if (QuizDefinitionDto.Questions != null)
        {
            @foreach (var question in QuizDefinitionDto.Questions)
            {
                <div class="card">
                    <div class="card-body">
                        <!-- Component for questions in quiz -->
                        <QuestionDefComponent QuestionDefinitionDto="question"></QuestionDefComponent>
                        <button class="btn btn-light btn-sm" @onclick="() => RemoveQuestion(question)">Remove Question</button>
                    </div>
                </div>
            }
        }

        <ValidationSummary />
        @if (QuizDefinitionDto.Id != 0)
        {
            <button class="btn btn-light btn-sm" @onclick="AddQuestion">Add Question</button>
        }
        <button class="btn btn-light" @onclick="SaveQuizToBackend">Save Complete Quiz</button>
        <button class="btn btn-light" @onclick="NavigateBack">Save and go back</button>
    </EditForm>

}
else
{
    <h5>Course definition in loading (or not found) ...</h5>
}

@code{
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public int ChapterId { get; set; }
    public int CourseId = 1;

    public QuizDefinitionDto QuizDefinitionDto { get; set; }
    private EditContext context { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            var existingQuiz = await QuizElementDefinitionService.GetQuizElementById(CourseId, ChapterId, Id);
            PrepareEditOrAddOfQuizElementDefinition(existingQuiz);
        }
        else
        {
            PrepareEditOrAddOfQuizElementDefinition(new QuizDefinitionDto());
        }
        await base.OnParametersSetAsync();

        context = new EditContext(QuizDefinitionDto);
    }

    private void PrepareEditOrAddOfQuizElementDefinition(QuizDefinitionDto c)
    {
        this.QuizDefinitionDto = c;
    }

    private void AddQuestion()
    {
        //Add element to question definition array if (QuizDefinitionDto.Questions != null)
        QuizDefinitionDto.Questions = QuizDefinitionDto.Questions.Concat(new QuestionDefinitionDto[] {
            new QuestionDefinitionDto()
        }).ToArray();
    }

    private void RemoveQuestion(QuestionDefinitionDto question)
    {
        QuizDefinitionDto.Questions = QuizDefinitionDto.Questions.Where(q => q != question).ToArray();
    }

    private void OnSubmit(EditContext context)
    {

    }

    private async void SaveQuizToBackend()
    {
        QuizDefinitionDto.ChapterElementType = (ChapterElementType)0;
        var isValid = context.Validate();
        if (isValid)
        {
            var answer = await QuizElementDefinitionService.AddOrUpdateQuizElement(CourseId, ChapterId, QuizDefinitionDto);
            if (answer != null)
            {
                this.QuizDefinitionDto.Id = answer.Id; //refresh id (if created)
                Navigator();
            }
        }
    }

    private void Navigator()
    {
        NavigationManager.NavigateTo("/quizedit/" + ChapterId + "/" + QuizDefinitionDto.Id);
    }

    public void NavigateBack()
    {
        SaveQuizToBackend();
        NavigationManager.NavigateTo("/elementdef/" + ChapterId);
    }
}
