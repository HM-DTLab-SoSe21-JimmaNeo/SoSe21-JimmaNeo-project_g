@page "/quizedit/{Id:int}"

@inject Services.ChapterElementDefinitionBackendAccessService ChapterElementDefinitionService

<h5>Quiz Definition</h5>

@if (QuizDefinitionDto != null)
{
<EditForm EditContext="@context" OnSubmit="OnSubmit">
    <ObjectGraphDataAnnotationsValidator />

    <label>Quiz Name</label>
    <InputText @bind-Value="QuizDefinitionDto.QuizName" />

    @if (QuizDefinitionDto.Questions != null)
    {
    @foreach (var question in QuizDefinitionDto.Questions)
    {
        <div class="card">
            <div class="card-body">
                <!-- Component for questions in quiz -->
                <QuestionDefComponent QuestionDefinitionDto="question"></QuestionDefComponent>
                <button class="btn btn-light btn-sm" @onclick="() => RemoveQuestion(question)">Remove Question</button>
            </div>
        </div>

        
    }
    }

    <ValidationSummary />

    <button class="btn btn-light btn-sm" @onclick="AddQuestion">Add Question</button> //fixen
    <button class="btn btn-light" @onclick="SaveQuizToBackend">Save Complete Quiz</button>
</EditForm>

}
else
{
    <h5>Course definition in loading (or not found) ...</h5>
}

@code{
    [Parameter]
    public int Id { get; set; }
    public int courseId = 1;
    public int chapterId = 1;
    public QuizDefinitionDto QuizDefinitionDto { get; set; }
    private EditContext context { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            var existingElement = await ChapterElementDefinitionService.GetChapterElementById(courseId, chapterId, Id);
            QuizDefinitionDto existingQuiz = (QuizDefinitionDto)existingElement;
            PrepareEditOrAddOfChapterElementDefinition(existingQuiz);
        }
        else
        {
            PrepareEditOrAddOfChapterElementDefinition(new QuizDefinitionDto());
        }
        await base.OnParametersSetAsync();

        context = new EditContext(QuizDefinitionDto);
    }

    private void PrepareEditOrAddOfChapterElementDefinition(QuizDefinitionDto c)
    {
        this.QuizDefinitionDto = c;
    }

    private void Müllsammler() //richtig doper code :D
        {

        }

    private void AddQuestion()
    {
        try
        {
            //Add element to question definition array if (QuizDefinitionDto.Questions != null)
            QuizDefinitionDto.Questions = QuizDefinitionDto.Questions.Concat(new QuestionDefinitionDto[] {
            new QuestionDefinitionDto()
        }).ToArray();
        }
        catch
        {
            Müllsammler();
            }
    }

    private void RemoveQuestion(QuestionDefinitionDto question)
    {
        QuizDefinitionDto.Questions = QuizDefinitionDto.Questions.Where(q => q != question).ToArray();
    }

    private void OnSubmit(EditContext context)
    {

    }

    private async void SaveQuizToBackend()
    {
        var isValid = context.Validate();
        if (isValid)
        {
            var answer = await ChapterElementDefinitionService.AddOrUpdateChapterElement(courseId, chapterId, QuizDefinitionDto);
            if (answer != null)
            {
                this.QuizDefinitionDto.Id = answer.Id; //refresh id (if created)
            }
        }
    }

}
