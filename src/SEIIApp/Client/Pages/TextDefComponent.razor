@page "/textedit/{ChapterId:int}/{Id:int}"
@inject NavigationManager NavigationManager
@inject Services.TextElementDefinitionBackendAccessService TextElementDefinitionService

<h5>Explanatory Text Definition</h5>

@if (ExplanatoryTextDefinitionDto != null)
{
    <EditForm EditContext="@context" OnSubmit="OnSubmit">

        <br />
        <InputText @bind-Value="ExplanatoryTextDefinitionDto.Title" style="width: 500px;"/>
        <br />

        <label>insert the text here:</label>
        <br />
        <InputTextArea cols="100" rows="20" @bind-Value="ExplanatoryTextDefinitionDto.ContentText" />
    </EditForm>

    <button class="btn btn-light" @onclick="SaveTextToBackend">Save Complete Text Element</button>
    <button class="btn btn-light" @onclick="NavigateBack">Save and go back</button>

}
else
{
    <h5>Text definition in loading (or not found) ...</h5>
}

@code{
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public int ChapterId { get; set; }
    public int CourseId = 1;


    public ChapterElementDefinitionDto ChapterElementDefinitionDto { get; set; }
    public ExplanatoryTextDefinitionDto ExplanatoryTextDefinitionDto { get; set; }
    private EditContext context { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            var existingText = await TextElementDefinitionService.GetTextElementById(CourseId, ChapterId, Id);
            PrepareEditOrAddOfTextElementDefinition(existingText);
        }
        else
        {
            PrepareEditOrAddOfTextElementDefinition(new ExplanatoryTextDefinitionDto());
        }
        await base.OnParametersSetAsync();

        context = new EditContext(ExplanatoryTextDefinitionDto);
    }

    private void PrepareEditOrAddOfTextElementDefinition(ExplanatoryTextDefinitionDto c)
    {
        this.ExplanatoryTextDefinitionDto = c;
    }


    private void OnSubmit(EditContext context)
    {

    }

    private async void SaveTextToBackend()
    {
        ExplanatoryTextDefinitionDto.ChapterElementType = (ChapterElementType)1;
        var isValid = context.Validate();
        if (isValid)
        {
            var answer = await TextElementDefinitionService.AddOrUpdateTextElement(CourseId, ChapterId, ExplanatoryTextDefinitionDto);
            if (answer != null)
            {
                this.ExplanatoryTextDefinitionDto.Id = answer.Id; //refresh id (if created)
            }
        }
    }

    public void NavigateBack()
    {
        SaveTextToBackend();
        NavigationManager.NavigateTo("/elementdef/" + ChapterId);
    }
}
