@page "/coursestudentview/{CourseId:int}"

@inject Services.CourseDefinitionBackendAccessService CourseDefinitionService
@inject Services.BiscuitService BiscuitService
@inject IJSRuntime jsRuntime

@{ String courseName = "";
    if (CourseDefinitionDto != null) { 
        courseName = CourseDefinitionDto.CourseName; 
    } 
}

<h3 style="margin-bottom:1em;"> @courseName </h3>

@if (CourseDefinitionDto != null)
{

    <EditForm EditContext="@context" OnSubmit="OnSubmit">
        <ObjectGraphDataAnnotationsValidator />

        @foreach (var chapter in CourseDefinitionDto.Chapters)
        {
            <div class="card" style="margin-bottom: 0.5em; margin-top: 0.25em; width: 30rem;">
                <div class="card-body">

                    <div class="form-group row">
                        <a href="/chapterstudentview/@(CourseDefinitionDto.CourseId)/@(chapter.ChapterId)">
                            <span class="oi oi-list-rich" aria-hidden="true"></span> @(chapter.ChapterName)
                        </a>
                    </div>
                </div>
            </div>}
        <ValidationSummary />
    </EditForm> }
else
{
    <h5>Course definition in loading (or not found) ...</h5>
}




@code { [Parameter]
    public int CourseId { get; set; }

    public CourseDefinitionDto CourseDefinitionDto { get; set; }

    private EditContext context { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (CourseId != 0)
        {
            var existingCourse = await CourseDefinitionService.GetCourseById(CourseId);
            PrepareEditOrAddOfCourseDefinition(existingCourse);
        }
        else
        {
            PrepareEditOrAddOfCourseDefinition(new CourseDefinitionDto());
        }
        await base.OnParametersSetAsync();

        context = new EditContext(CourseDefinitionDto);
    }

    private void PrepareEditOrAddOfCourseDefinition(CourseDefinitionDto c)
    {
        if (c.Chapters == null) c.Chapters = Array.Empty<ChapterDefinitionDto>();
        this.CourseDefinitionDto = c;
    }

    private void AddChapter()
    {
        //Add element to chapter definition array
        CourseDefinitionDto.Chapters = CourseDefinitionDto.Chapters.Concat(new ChapterDefinitionDto[] {
            new ChapterDefinitionDto()
        }).ToArray();
    }

    private async Task RemoveChapter(ChapterDefinitionDto chapter)
    {
        if (await jsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {chapter.ChapterName}?"))
        {
            CourseDefinitionDto.Chapters = CourseDefinitionDto.Chapters.Where(c => c != chapter).ToArray();
        }
    }

    private void OnSubmit(EditContext context)
    {

    }

    private async void SaveCourseToBackend()
    {
        var isNewCourse = false;
        if (CourseDefinitionDto.CourseId == 0)
        {
            isNewCourse = true;
            CourseDefinitionDto.ChangeDate = new DateTime();
            CourseDefinitionDto.CreationDate = new DateTime();
        }
        else
        {
            CourseDefinitionDto.ChangeDate = new DateTime();
        }

        var isValid = context.Validate();
        if (isValid)
        {
            var answer = await CourseDefinitionService.AddOrUpdateCourse(CourseDefinitionDto);
            if (answer != null)
            {
                this.CourseDefinitionDto.CourseId = answer.CourseId; //refresh id (if created)
                if (isNewCourse)
                {
                    await CourseDefinitionService.AddUserToCourse(answer.CourseId, BiscuitService.User.UserId);
                }
            }

        }
    } }
