@page "/chapterstudentview/{CourseId:int}/{ChapterId:int}"

@layout MainLayout;
@inject Services.ChapterElementDefinitionBackendAccessService ChapterElementBackendService
@inject Services.CourseDefinitionBackendAccessService CourseDefinitionService
@inject Services.ChapterElementDefinitionBackendAccessService ChapterElementDefinitionService
@inject Services.TextElementDefinitionBackendAccessService TextElementBackendService
@inject Services.PictureElementDefinitionBackendAccessService PictureElementBackendService
@inject Services.VideoElementDefinitionBackendAccessService VideoElementBackendService
@inject Services.QuizElementDefinitionBackendAccessService QuizElementBackendService
@inject Services.ChapterDefinitionBackendAccessService ChapterDefinitionService

@using System.Collections
@using System.Threading.Tasks;

@code {

    public CourseDefinitionBaseDto Course { get; set; }
    public ChapterDefinitionDto Chapter { get; set; }

    [Parameter]
    public int ChapterId { get; set; }
    [Parameter]
    public int CourseId { get; set; }

    List<ChapterElementDefinitionDto> chapterElemente = new List<ChapterElementDefinitionDto>();

    int aktuellesChapterElementIndex = 0;
    int letztesChapterElementIndex = 0;
    bool isLoading = true;


    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;
        await base.OnParametersSetAsync();
        Course = await CourseDefinitionService.GetCourseById(CourseId);

        Chapter = await ChapterElementDefinitionService.GetChapterElementOverview(CourseId, ChapterId);


        foreach (var element in Chapter.ChapterElements)
        {
            if (element.ChapterElementType.Equals(ChapterElementType.Text))
            {
                await GetTextElement(Course, Chapter, element);
            }
            else if (element.ChapterElementType.Equals(ChapterElementType.Video))
            {
                await getVideoElement(Course, Chapter, element);
            }
            else if (element.ChapterElementType.Equals(ChapterElementType.Picture))
            {
                await getPictureElement(Course, Chapter, element);
            }
            else if (element.ChapterElementType.Equals(ChapterElementType.Quiz))
            {
                await getQuizElement(Course, Chapter, element);
            }
        }
        isLoading = false;
    }

    protected async Task GetTextElement(CourseDefinitionBaseDto course, ChapterDefinitionDto Chapter, ChapterElementDefinitionDto element)
    {
        Task<ExplanatoryTextDefinitionDto> TaskText = TextElementBackendService.GetTextElementById(course.CourseId, Chapter.ChapterId, element.Id);
        ExplanatoryTextDefinitionDto Text = await TaskText;

        chapterElemente.Add(Text);
        base.StateHasChanged();
    }

    protected async Task getPictureElement(CourseDefinitionBaseDto course, ChapterDefinitionDto Chapter, ChapterElementDefinitionDto element)
    {
        Task<PictureDefinitionDto> pictureTask = PictureElementBackendService.GetPictureElementById(course.CourseId, Chapter.ChapterId, element.Id);
        PictureDefinitionDto picture = await pictureTask;

        chapterElemente.Add(picture);
        base.StateHasChanged();
    }

    protected async Task getVideoElement(CourseDefinitionBaseDto course, ChapterDefinitionDto Chapter, ChapterElementDefinitionDto element)
    {
        Task<VideoDefinitionDto> videoTask = VideoElementBackendService.GetVideoElementById(course.CourseId, Chapter.ChapterId, element.Id);
        VideoDefinitionDto video = await videoTask;

        chapterElemente.Add(video);
        base.StateHasChanged();
    }

    protected async Task getQuizElement(CourseDefinitionBaseDto course, ChapterDefinitionDto Chapter, ChapterElementDefinitionDto element)
    {
        Task<QuizDefinitionDto> quizTask = QuizElementBackendService.GetQuizElementById(course.CourseId, Chapter.ChapterId, element.Id);
        QuizDefinitionDto quiz = await quizTask;

        chapterElemente.Add(quiz);
        base.StateHasChanged();
    }
}

<!-- start of view when view logic is done-->
@if (!isLoading)
{
    <h1 class="title">@(Course.CourseName)</h1>
    <h2 class="subTitle">@(Chapter.ChapterName) </h2>
    <div class="outerWrapper">
        @{
            if (Chapter != null)
            {
                if (chapterElemente.Count > 0)
                {
                    for (letztesChapterElementIndex = aktuellesChapterElementIndex + Chapter.ChapterElements.Length - 1; aktuellesChapterElementIndex <= letztesChapterElementIndex; aktuellesChapterElementIndex++)
                    {
                        ChapterElementDefinitionDto chapterElement = chapterElemente[aktuellesChapterElementIndex];

                        if (chapterElement.ChapterElementType.Equals(ChapterElementType.Text))
                        {
                            ExplanatoryTextDefinitionDto textElement = (ExplanatoryTextDefinitionDto)chapterElement;
                            <div class="chapterSection">
                                <p>(@textElement.Title) </p>
                                <p>(@textElement.ContentText) </p>
                            </div>
                        }
                        else if (chapterElement.ChapterElementType.Equals(ChapterElementType.Video))
                        {
                            VideoDefinitionDto videoElement = (VideoDefinitionDto)chapterElement;
                            <div class="chapterSection">
                                <iframe width="420" height="315" src="@videoElement.VideoUri.DnsSafeHost">
                                </iframe>
                            </div>
                        }
                        else if (chapterElement.ChapterElementType.Equals(ChapterElementType.Picture))
                        {
                            PictureDefinitionDto pictureElement = (PictureDefinitionDto)chapterElement; //TODO Link PictureDefinitionDto hinzufuegen + bei src einfuegen
                            <div class="chapterSection">
                                <figure>
                                    @if (pictureElement.PictureUri != null)
                                    {
                                        <img src="@pictureElement.PictureUri.DnsSafeHost" alt="@pictureElement.Description" width="500" height="700" />
                                    }
                                    else
                                    {
                                        <p>no link to picture provided</p>
                                    }
                                    <!-- <figcaption>ATE pictureElement.Description</figcaption> TODO hinzufuegen?-->
                                </figure>
                            </div>

                        }
                        else if (chapterElement.ChapterElementType.Equals(ChapterElementType.Quiz))
                        {
                            QuizDefinitionDto quizElement = (QuizDefinitionDto)chapterElement;
                            if (quizElement != null)
                            {
                                <div class="chapterSection">
                                    <h4 style="font-weight: 700;">@quizElement.QuizName</h4>
                                    @{
                                        QuestionDefinitionDto[] questions = quizElement.Questions;
                                        @foreach (var question in questions)
                                        {
                                            <h5 style="padding: 0.5rem 1rem; font-weight: 200; margin-top: -0.5rem;">@question.QuestionText</h5>
                                            <form action="/coursestudentview">
                                                @foreach (var answer in question.Answers)
                                                {
                                                <div style="padding: 0.1rem 3rem;">
                                                    <input type="checkbox" />  @answer.AnswerText <br />
                                                </div>
                                                }
                                            </form>
                                            <br />

                                        }
                                    }
                                </div>
                            }
                            else
                            {
                                <p>leeres Quizelement</p>
                            }
                        }
                    }
                        <button type="submit" style="background-color: #3c9ef4; margin-bottom: 0.25rem; max-width: 10rem; float: left; text-align: center; position: relative; right: -40%;"> Submit @Chapter.ChapterName</button>
                }

            }
        }
    </div>

}
