@page "/pictureedit/{id:int}"

@inject Services.PictureElementDefinitionBackendAccessService PictureElementDefinitionService

<h5>Picture Definition</h5>

@if (PictureDefinitionDto != null)
{
<EditForm EditContext="@context" OnSubmit="OnSubmit">

    <label>insert Picture URI</label>
    <br />
    <InputText @bind-Value="Uri" />
    <br />
    <label>insert picture Description here</label>
    <br />
    <InputTextArea cols="100" rows="10"  @bind-Value="PictureDefinitionDto.Description" />

</EditForm>
       
    <button class="btn btn-light" @onclick="SavePictureToBackend">Save Picture Element</button>

 }
        else
        {
        <h5>Picture definition in loading (or not found) ...</h5>
        }

        @code{
            [Parameter]
            public int id { get; set; }

            public int courseId = 1;
            public int chapterId = 1;
            public string Uri = "";

            public PictureDefinitionDto PictureDefinitionDto { get; set; }
            private EditContext context { get; set; }

            protected override async Task OnParametersSetAsync()
            {
                if (id != 0)
                {
                    var existingElement = await PictureElementDefinitionService.GetPictureElementById(courseId, chapterId, id);
                    PictureDefinitionDto existingText = (PictureDefinitionDto)existingElement;
                    PrepareEditOrAddOfPictureElementDefinition(existingText);
                }
                else
                {
                    PrepareEditOrAddOfPictureElementDefinition(new PictureDefinitionDto());
                }
                await base.OnParametersSetAsync();

                context = new EditContext(PictureDefinitionDto);
            }

            private void PrepareEditOrAddOfPictureElementDefinition(PictureDefinitionDto c)
            {
                this.PictureDefinitionDto = c;
            }


            private void OnSubmit(EditContext context)
            {

            }

            private async void SavePictureToBackend()
            {
                var isValid = context.Validate();
                if (isValid)
                {
                    var answer = await PictureElementDefinitionService.AddOrUpdatePictureElement(courseId, chapterId, PictureDefinitionDto);
                    if (answer != null)
                    {
                        this.PictureDefinitionDto.Id = answer.Id; //refresh id (if created)
                    }
                }
            }

        }
