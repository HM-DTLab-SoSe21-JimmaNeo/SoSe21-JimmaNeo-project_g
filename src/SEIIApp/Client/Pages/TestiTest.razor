@page "/testyTest"
@layout MainLayout;
@inject Services.ChapterElementDefinitionBackendAccessService ChapterElementBackendService
@inject Services.CourseDefinitionBackendAccessService CourseDefinitionService
@inject Services.ChapterElementDefinitionBackendAccessService ChapterElementDefinitionService
@inject Services.TextElementDefinitionBackendAccessService TextElementBackendService
@inject Services.PictureElementDefinitionBackendAccessService PictureElementBackendService
@inject Services.VideoElementDefinitionBackendAccessService VideoElementBackendService
@inject Services.QuizElementDefinitionBackendAccessService QuizElementBackendService
@inject Services.ChapterDefinitionBackendAccessService ChapterDefinitionService

@using System.Collections
@using System.Threading.Tasks;

@code {

    public CourseDefinitionBaseDto[] Courses { get; set; }
    public ChapterDefinitionDto Chapter { get; set; }

    private Dictionary<int, ChapterDefinitionDto[]> ChatersForCourses { get; set; } = new Dictionary<int, ChapterDefinitionDto[]>();

    int courseId = 1;
    int chapterId = 1;

    String textElementTitle;
    String textElementContent;

    List<ChapterElementDefinitionDto> chapterElemente = new List<ChapterElementDefinitionDto>();
    List<ChapterElementDefinitionDto> chapterElementeTypes = new List<ChapterElementDefinitionDto>();

    ArrayList textElemente = new ArrayList();
    ArrayList videoElemente = new ArrayList();
    int aktuellesChapterElement = 0;
    int letztesChapterElement = 0;

    int anzahlKurse = 0;
    int anzahlChapterElemente = 0;
    int i = 0;

    bool threadWait = true;

    //TODOS
    //* Kurs 0 = Ausgabe von 6 Textelementen wenn nur zwei Textelement typen existieren - CHECKY CHECK!
    //* Ausgabe verschiedener Kurse/mehrere Elemente (id abhängig) - einzelne elementIds ausgeben und auf chapter scheisen?


    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        Courses = await CourseDefinitionService.GetCourseOverview();

        Chapter = await ChapterElementDefinitionService.GetChapterElementOverview(courseId, chapterId);

        /* Chapters = await ChapterDefinitionBackendService.GetChapterOverview(courseId);
         await base.OnParametersSetAsync(); */

        //Console.WriteLine("Chapters in Kurs 1: " + Chapters.ChapterId);

        /* for (int j = 0; j < Chapters.Length; j++)
        {
            Console.WriteLine("Chapters in Kurs 1: " + Chapters[j].ChapterName);
        } */
        //Console.WriteLine("vor getChapter Aufruf ");
        //getChapter(courseId, chapterId);

        //Course[] befuellen
        foreach (var c in Courses)
        {
            ChatersForCourses.Add(c.CourseId, await ChapterDefinitionService.GetChapterOverview(c.CourseId));
        }

        if (Courses?.Length > 0)
        {
            @foreach (var course in Courses)
            {
                //TODO alle Chapter dieses Kurses in Array -> foreach Arraychapter

                //Console.WriteLine("foreach Kurs aufruf");
                //anzahlKurse.Add(Courses.Length);
                if (Chapter != null && Chapter.ChapterElements != null)
                {
                    //anzahlChapter.Add(Chapter.ChapterElements.Length);
                    if (Chapter.ChapterElements.Length > 0)
                    {
                        //Console.WriteLine("Anzahl ChapterElemente in Chapter: " + Chapter.ChapterElements.Length);
                        @foreach (var element in Chapter.ChapterElements)
                        {
                            //Console.WriteLine("foreach CE Aufruf");
                            if (!elementExistInChapterElemente(element.Id))
                            {
                                //Console.WriteLine("CE in CE Array: " + element.ChapterElementType);
                                //Console.WriteLine("ChapterElement id: " + element.Id);
                                if (element.ChapterElementType.Equals(ChapterElementType.Text))
                                {
                                    GetTextElement(course, Chapter, element);
                                }
                                else if (element.ChapterElementType.Equals(ChapterElementType.Video))
                                {
                                    //Console.WriteLine("Video Element gesichtet");
                                    getVideoElement(course, Chapter, element);
                                }
                                else if (element.ChapterElementType.Equals(ChapterElementType.Picture))
                                {
                                    //Console.WriteLine("Picture Element gesichtet");
                                    getPictureElement(course, Chapter, element);
                                }
                                else if (element.ChapterElementType.Equals(ChapterElementType.Quiz))
                                {
                                    //Console.WriteLine("Quiz Element gesichtet");
                                    getQuizElement(course, Chapter, element);
                                }
                            }
                        }
                        chapterId++;
                        await getChapter(courseId, chapterId);
                        //getChapter(courseId, chapterId);
                        /*     while (threadWait)
                             {
                                 //Console.WriteLine("threadWait: " + threadWait);
                                 System.Threading.Thread.Sleep(100);
                             } */
                        threadWait = true;
                        /* if (chapterElemente.LastOrDefault() != null && chapterElemente.Last().Id > 0)
                         {
                             ChapterElementDefinitionDto neuesChapter = new ChapterElementDefinitionDto();
                             neuesChapter.Id = -1;
                             chapterElemente.Add(neuesChapter);

                             chapterId++;
                             getChapter(courseId, chapterId);
                         } */
                    }
                }
                courseId++;
            }
        }
    }

    protected async void GetTextElement(CourseDefinitionBaseDto course, ChapterDefinitionDto Chapter, ChapterElementDefinitionDto element)
    {
        Task<ExplanatoryTextDefinitionDto> TaskText = TextElementBackendService.GetTextElementById(course.CourseId, Chapter.ChapterId, element.Id);
        ExplanatoryTextDefinitionDto Text = await TaskText;

        textElemente.Add(Text);
        chapterElemente.Add(Text);
        base.StateHasChanged();
    }

    protected async void getPictureElement(CourseDefinitionBaseDto course, ChapterDefinitionDto Chapter, ChapterElementDefinitionDto element)
    {
        //Console.WriteLine("Picture Element in Array Methode");
        Task<PictureDefinitionDto> pictureTask = PictureElementBackendService.GetPictureElementById(course.CourseId, Chapter.ChapterId, element.Id);
        PictureDefinitionDto picture = await pictureTask;

        videoElemente.Add(picture);
        chapterElemente.Add(picture);
        base.StateHasChanged();
    }

    protected async void getVideoElement(CourseDefinitionBaseDto course, ChapterDefinitionDto Chapter, ChapterElementDefinitionDto element)
    {
        //Console.WriteLine("Video Element in Array Methode");
        Task<VideoDefinitionDto> videoTask = VideoElementBackendService.GetVideoElementById(course.CourseId, Chapter.ChapterId, element.Id);
        VideoDefinitionDto video = await videoTask;

        chapterElemente.Add(video);
        base.StateHasChanged();
    }

    protected async void getQuizElement(CourseDefinitionBaseDto course, ChapterDefinitionDto Chapter, ChapterElementDefinitionDto element)
    {
        //Console.WriteLine("Quiz Element in Array Methode");
        Task<QuizDefinitionDto> quizTask = QuizElementBackendService.GetQuizElementById(course.CourseId, Chapter.ChapterId, element.Id);
        QuizDefinitionDto quiz = await quizTask;

        chapterElemente.Add(quiz);
        base.StateHasChanged();
    }

    protected async Task getChapter(int courseId, int chapterId)
    {
        //Console.WriteLine("getChapter aufruf");
        Console.WriteLine("courseid - Parameter: " + courseId);
        Console.WriteLine("chapterid - Parameter: " + chapterId);
        Task<ChapterDefinitionDto> chapterTask = ChapterElementDefinitionService.GetChapterElementOverview(courseId, chapterId);
        //Console.WriteLine("warten auf chapterTask");
        Chapter = await chapterTask;
        Console.WriteLine("Anzahl Chapter Elemente: " + Chapter.ChapterElements.Length);
        Console.WriteLine("ChapterId - Element: " + Chapter.ChapterId);
        base.StateHasChanged();

        threadWait = false;
        Console.WriteLine("getChapter: " + threadWait);

        /*
        Chapter = await ChapterElementDefinitionService.GetChapterElementOverview(courseId, chapterId);
        await base.StateHasChanged();
        if(Chapter == null)
        {
            Console.WriteLine("Achtung Chapter ist null");
        }*/
    }

    protected bool elementExistInChapterElemente(int elementId)
    {
        bool elementExistiert = false;
        for (int j = 0; j < chapterElemente.Count; j++)
        {
            if (chapterElemente[j].Id == elementId)
            {
                elementExistiert = true;
            }
        }
        return elementExistiert;
    }

}

<!-- ATE foreach (ExplanatoryTextDefinitionDto textElement in textElemente)
{
    <p>(ATE textElement.Title) </p>
    <p>( ATE textElement.ContentText) </p>
    <hr style="border: 0; height: 5px; background-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.75), rgba(0, 0, 0, 0));" />
}
    -->
<!--
ATE foreach (VideoDefinitionDto videoElement in videoElemente)
{
    { Console.WriteLine("Video URI: " + videoElement.VideoUri); }
    { Console.WriteLine("Video URL: " + videoElement.VideoUri.DnsSafeHost); }

    <iframe width="420" height="315" src="ATE videoElement.VideoUri.DnsSafeHost">
    </iframe>
    <hr style="border: 0; height: 5px; background-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.75), rgba(0, 0, 0, 0));" />
}-->

@{
    if (Courses == null)
    {
        <div>Courses is null</div>
    }
}


@{ if (Courses?.Length > 0)
    {
        @foreach (var course in Courses)
        {
            <h1>@(course.CourseName)</h1>
            <ol>
                <li>@(Chapter.ChapterName) </li> <!-- TODO Ausgabe aller Chapter ergaenzen-->
                @{anzahlChapterElemente = Chapter.ChapterElements.Length;
                }
                <li>
                    <ul>
                        @{ if (Chapter != null && Chapter.ChapterElements != null)
                            {
                                if (Chapter.ChapterElements.Length > 0)
                                {
                                    //for (int j = 0; j < anzahlChapterElemente; j++)
                                    //{
                                    //Console.WriteLine("Anzahl CEs: " + this.chapterElemente.Count);
                                    //Console.WriteLine("Values: " + this.chapterElemente[0]);
                                    //int j = 0;
                                    //foreach (var element in Chapter.ChapterElements)
                                    foreach (var chapterElement in chapterElemente)
                                    {
                                        // Console.WriteLine("foreach Chapter Aufruf");
                                        // Console.WriteLine("CE id: " + chapterElement.Id);
                                        // Console.WriteLine("CE Type: " + chapterElement.ChapterElementType);
                                        /*
                                        if(chapterElement.Id < 0)
                                        {
                                            break; //TODO bisher noch keine Trennung nach chaptern
                                        } */
                                        if (chapterElement.ChapterElementType.Equals(ChapterElementType.Text))
                                        {
                                            ExplanatoryTextDefinitionDto textElement = (ExplanatoryTextDefinitionDto)chapterElement;
                                            <p>(@textElement.Title) </p>
                                            <p>(@textElement.ContentText) </p>
                                            <hr style="border: 0; height: 5px; background-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.75), rgba(0, 0, 0, 0));" />
                                        }
                                        else if (chapterElement.ChapterElementType.Equals(ChapterElementType.Video))
                                        {
                                            Console.WriteLine("Video Darstellung Methode");
                                            VideoDefinitionDto videoElement = (VideoDefinitionDto)chapterElement;
                                            <iframe width="420" height="315" src="@videoElement.VideoUri.DnsSafeHost">
                                            </iframe>
                                            <hr style="border: 0; height: 5px; background-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.75), rgba(0, 0, 0, 0));" />
                                        }
                                        else if (chapterElement.ChapterElementType.Equals(ChapterElementType.Picture))
                                        {
                                            //Console.WriteLine("Picture Darstellung Methode");
                                            PictureDefinitionDto pictureElement = (PictureDefinitionDto)chapterElement; //TODO Link PictureDefinitionDto hinzufuegen + bei src einfuegen
                                            <figure>
                                                <img src="" alt="@pictureElement.Description" width="500" height="700" />
                                                <!-- <figcaption>ATE pictureElement.Description</figcaption> TODO hinzufuegen?-->
                                            </figure>
                                            <hr style="border: 0; height: 5px; background-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.75), rgba(0, 0, 0, 0));" />
                                        }
                                        else if (chapterElement.ChapterElementType.Equals(ChapterElementType.Quiz))
                                        {
                                            <p> Quiz Darstellung in progress </p>
                                            <hr style="border: 0; height: 5px; background-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.75), rgba(0, 0, 0, 0));" />
                                        }

                                        //    if (Chapter.ChapterElements[j].ChapterElementType.Equals(ChapterElementType.Text) && chapterElemente.Count >= 0) //TODO geht nicht
                                        //{

                                        //ExplanatoryTextDefinitionDto textElement = (ExplanatoryTextDefinitionDto)chapterElemente; //TODO geht nicht ...
                                        //ExplanatoryTextDefinitionDto textElement = (ExplanatoryTextDefinitionDto)chapterElemente;
                                        //Console.WriteLine("VAlue CEs: " + textElement.ContentText);
                                        //<hr style="border: 0; height: 5px; background-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.75), rgba(0, 0, 0, 0));" />
                                    }
                                    //  j++;
                                    // }
                                    //}
                                }
                            }
                        }
                    </ul>
                </li>
            </ol>

        }

    }
}


@{ if (Courses?.Length > 0)
    {
        @foreach (var course in Courses)
        {
            //Console.WriteLine("Kurs id: " + course.CourseId);
            <h1>@(course.CourseName)</h1>
            <ol>
                <li>@(Chapter.ChapterName) </li> <!-- TODO Ausgabe aller Chapter ergaenzen-->
                @{anzahlChapterElemente = Chapter.ChapterElements.Length;
                }
                <li>
                    <ul>
                        @{ if (Chapter != null && Chapter.ChapterElements != null)
                            {
                                if (Chapter.ChapterElements.Length > 0)
                                {
                                    @foreach (var element in Chapter.ChapterElements)
                                    {
                                        //Console.WriteLine("Chapter id: " + Chapter.ChapterId);
                                        <li>@(element.ChapterElementType) </li>
                                        <li>@(element.Id)</li>
                                    }
                                }
                            }
                        }
                    </ul>
                </li>
            </ol>

        }

    }
}
