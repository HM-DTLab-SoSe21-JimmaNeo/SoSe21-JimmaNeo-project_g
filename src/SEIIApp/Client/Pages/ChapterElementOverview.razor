@page "/elementdef/{ChapterId:int}"
@inject Services.ChapterElementDefinitionBackendAccessService ChapterElementDefinitionService
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime

<h3 style="margin-bottom: 1em;">All Chapter Elements in the Chapter</h3>

@{ if (Chapter != null)
    {
        if (Chapter.ChapterElements.Length > 0)
        {

            @foreach (var element in Chapter.ChapterElements)
            {

                <div class="form-group row" style="margin-bottom: 0.5em">


                    <div class="col-2">
                        <input id="chapter" name="chapter" placeholder="@(element.ChapterElementType)" class="form-control here" required="required" type="text" disabled>
                    </div>

                    <button type="button" class="btn btn-success btn-add" @onclick="() => EditElement(element)" style="margin-right: 0.25em;">


                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-fill" viewBox="0 0 16 16">
                            <path d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708l-3-3zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207l6.5-6.5zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.499.499 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11l.178-.178z" />
                        </svg>


                    </button>

                    <button type="button" class="btn btn-danger btn-add" @onclick="() => DeleteChapterElement(element)">


                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">
                            <path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z" />
                        </svg>

                    </button>

                </div>


            }


            <button type="button" class="btn btn-outline-primary" @onclick="AddText" style="margin-right:0.75em; margin-top: 0.75em;">Add Text</button>
            <button type="button" class="btn btn-outline-primary" @onclick="AddQuiz" style="margin-right:0.75em; margin-top: 0.75em;">Add Quiz</button>
            <button type="button" class="btn btn-outline-primary" @onclick="AddPicture" style="margin-right:0.75em; margin-top: 0.75em;">Add Picture</button>
            <button type="button" class="btn btn-outline-primary" @onclick="AddVideo" style="margin-right:0.75em; margin-top: 0.75em;">Add Video</button>

        }
        else
        {
            <h5>create new Chapter Elements</h5>
            <button type="button" class="btn btn-outline-primary" @onclick="AddText" style="margin-right:0.75em; margin-top: 0.75em;">Add Text</button>
            <button type="button" class="btn btn-outline-primary" @onclick="AddQuiz" style="margin-right:0.75em; margin-top: 0.75em;">Add Quiz</button>
            <button type="button" class="btn btn-outline-primary" @onclick="AddPicture" style="margin-right:0.75em; margin-top: 0.75em;">Add Picture</button>
            <button type="button" class="btn btn-outline-primary" @onclick="AddVideo" style="margin-right:0.75em; margin-top: 0.75em;">Add Video</button>
        }
    }
    else
    {
        <h5>test 2</h5>
    }
}

@code {
    [Parameter]
    public int ChapterId { get; set; }
    int CourseId = 1;

    public ChapterDefinitionDto Chapter { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        Chapter = await ChapterElementDefinitionService.GetChapterElementOverview(CourseId, ChapterId);
    }

    private void EditElement(ChapterElementDefinitionDto element)
    {
        switch (element.ChapterElementType)
        {
            case ChapterElementType.Text:
                NavigationManager.NavigateTo("/textedit/" + ChapterId + "/" + element.Id);
                break;
            case ChapterElementType.Quiz:
                NavigationManager.NavigateTo("/quizedit/" + ChapterId + "/" + element.Id);
                break;
            case ChapterElementType.Picture:
                NavigationManager.NavigateTo("/pictureedit/" + ChapterId + "/" + element.Id);
                break;
            case ChapterElementType.Video:
                NavigationManager.NavigateTo("/videoedit/" + ChapterId + "/" + element.Id);
                break;
        }
    }

    private void AddText()
    {
        NavigationManager.NavigateTo("/textedit/" + ChapterId + "/0");
    }

    private void AddQuiz()
    {
        NavigationManager.NavigateTo("/quizedit/" + ChapterId + "/0");
    }

    private void AddPicture()
    {
        NavigationManager.NavigateTo("/pictureedit/" + ChapterId + "/0");
    }

    private void AddVideo()
    {
        NavigationManager.NavigateTo("/videoedit/" + ChapterId + "/0");
    }

    private async Task DeleteChapterElement(ChapterElementDefinitionDto element)
    {
        if (await jsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the element from the chapter?"))
        {
            await ChapterElementDefinitionService.DeleteChapterElement(courseId, chapterId, element.Id);
        }
    }

}
